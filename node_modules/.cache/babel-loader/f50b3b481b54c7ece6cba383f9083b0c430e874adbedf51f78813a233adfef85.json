{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nexport const useValidation = (value, validators) => {\n  _s();\n  // определяем базовые состояния для полей формы\n  const [isEmpty, setEmpty] = useState(true);\n  const [minLengthError, setMinLengthError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [inputValid, setInputValid] = useState(false);\n\n  // делаем свитч для вариации типов валидации по длине строки, пустоте и корректности почты через регулярное выражение\n  useEffect(() => {\n    for (const validation in validators) {\n      switch (validation) {\n        case 'minLength':\n          value.length < validators[validation] ? setMinLengthError(true) : setMinLengthError(false);\n          break;\n        case 'isEmpty':\n          value ? setEmpty(false) : setEmpty(true);\n          break;\n        case 'isEmail':\n          const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n          re.test(String(value).toLowerCase()) ? setEmailError(false) : setEmailError(true);\n          break;\n      }\n    }\n  }, [value]);\n\n  // определяем активность кнопки отправки формы. Если все проверки валидны - кнопка становится активной \n  useEffect(() => {\n    if (isEmpty || emailError || minLengthError) {\n      setInputValid(false);\n    } else {\n      setInputValid(true);\n    }\n  }, [isEmpty, emailError, minLengthError]);\n\n  // возвращаем все состояния\n  return {\n    isEmpty,\n    minLengthError,\n    emailError,\n    inputValid\n  };\n};\n// описываем состояния инпута\n_s(useValidation, \"L/bdn5W5lRlZjjvbLdxGi1Ayzmw=\");\nexport const useInput = (initialValue, validators) => {\n  _s2();\n  const [value, setValue] = useState(initialValue); // состояние значения в инпуте\n  const [isDirty, setDirty] = useState(false); //состояние показывает то, был ли выход из инпута или нет\n  const valid = useValidation(value, validators);\n\n  // изменения значения в инпуте\n  const onChange = e => {\n    setValue(e.target.value);\n  };\n\n  // проверка на пустоту и выход с кривозаполненного или незаполненного инпута\n  const onBlur = () => {\n    setDirty(true);\n  };\n\n  // возвращаем все состояния\n  return {\n    value,\n    onChange,\n    onBlur,\n    isDirty,\n    ...valid\n  };\n};\n_s2(useInput, \"ROXCByPZsuh/SPOaQe5dG6oyq/A=\", false, function () {\n  return [useValidation];\n});","map":{"version":3,"names":["React","useEffect","useState","useValidation","value","validators","_s","isEmpty","setEmpty","minLengthError","setMinLengthError","emailError","setEmailError","inputValid","setInputValid","validation","length","re","test","String","toLowerCase","useInput","initialValue","_s2","setValue","isDirty","setDirty","valid","onChange","e","target","onBlur"],"sources":["G:/GH projects/WTFAdmin/src/hooks/use-form-validate.js"],"sourcesContent":["import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport const useValidation = (value, validators) => {\r\n    // определяем базовые состояния для полей формы\r\n    const [isEmpty, setEmpty] = useState(true)\r\n    const [minLengthError, setMinLengthError] = useState(false)\r\n    const [emailError, setEmailError] = useState(false)\r\n    const [inputValid, setInputValid] = useState(false)\r\n\r\n    // делаем свитч для вариации типов валидации по длине строки, пустоте и корректности почты через регулярное выражение\r\n    useEffect(() => {\r\n        for (const validation in validators) {\r\n            switch(validation){\r\n                case 'minLength':\r\n                    value.length < validators[validation] ? setMinLengthError(true) : setMinLengthError(false)\r\n                    break\r\n                case 'isEmpty':\r\n                    value ? setEmpty(false) : setEmpty(true)\r\n                    break\r\n                case 'isEmail':\r\n                    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n                    re.test(String(value).toLowerCase()) ? setEmailError(false) : setEmailError(true)\r\n                    break\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n    // определяем активность кнопки отправки формы. Если все проверки валидны - кнопка становится активной \r\n    useEffect(() => {\r\n        if(isEmpty || emailError || minLengthError){\r\n            setInputValid(false)\r\n        }else{\r\n            setInputValid(true)\r\n            \r\n        }\r\n    }, [isEmpty, emailError, minLengthError])\r\n\r\n    // возвращаем все состояния\r\n    return{\r\n        isEmpty,\r\n        minLengthError,\r\n        emailError,\r\n        inputValid,\r\n    }\r\n}\r\n// описываем состояния инпута\r\nexport const useInput = (initialValue, validators) => {\r\n    const [value, setValue] = useState(initialValue) // состояние значения в инпуте\r\n    const [isDirty, setDirty] = useState(false) //состояние показывает то, был ли выход из инпута или нет\r\n    const valid = useValidation(value, validators)\r\n\r\n    // изменения значения в инпуте\r\n    const onChange = (e) => {\r\n        setValue(e.target.value)\r\n    }\r\n\r\n    // проверка на пустоту и выход с кривозаполненного или незаполненного инпута\r\n    const onBlur = () =>{\r\n        setDirty(true)\r\n    }\r\n\r\n    // возвращаем все состояния\r\n    return{\r\n        value,\r\n        onChange,\r\n        onBlur,\r\n        isDirty,\r\n        ...valid,\r\n    }\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAO,MAAMC,aAAa,GAAGA,CAACC,KAAK,EAAEC,UAAU,KAAK;EAAAC,EAAA;EAChD;EACA,MAAM,CAACC,OAAO,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACO,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACAD,SAAS,CAAC,MAAM;IACZ,KAAK,MAAMc,UAAU,IAAIV,UAAU,EAAE;MACjC,QAAOU,UAAU;QACb,KAAK,WAAW;UACZX,KAAK,CAACY,MAAM,GAAGX,UAAU,CAACU,UAAU,CAAC,GAAGL,iBAAiB,CAAC,IAAI,CAAC,GAAGA,iBAAiB,CAAC,KAAK,CAAC;UAC1F;QACJ,KAAK,SAAS;UACVN,KAAK,GAAGI,QAAQ,CAAC,KAAK,CAAC,GAAGA,QAAQ,CAAC,IAAI,CAAC;UACxC;QACJ,KAAK,SAAS;UACV,MAAMS,EAAE,GAAG,wJAAwJ;UACnKA,EAAE,CAACC,IAAI,CAACC,MAAM,CAACf,KAAK,CAAC,CAACgB,WAAW,CAAC,CAAC,CAAC,GAAGR,aAAa,CAAC,KAAK,CAAC,GAAGA,aAAa,CAAC,IAAI,CAAC;UACjF;MACR;IACJ;EACJ,CAAC,EAAE,CAACR,KAAK,CAAC,CAAC;;EAEX;EACAH,SAAS,CAAC,MAAM;IACZ,IAAGM,OAAO,IAAII,UAAU,IAAIF,cAAc,EAAC;MACvCK,aAAa,CAAC,KAAK,CAAC;IACxB,CAAC,MAAI;MACDA,aAAa,CAAC,IAAI,CAAC;IAEvB;EACJ,CAAC,EAAE,CAACP,OAAO,EAAEI,UAAU,EAAEF,cAAc,CAAC,CAAC;;EAEzC;EACA,OAAM;IACFF,OAAO;IACPE,cAAc;IACdE,UAAU;IACVE;EACJ,CAAC;AACL,CAAC;AACD;AAAAP,EAAA,CA3CaH,aAAa;AA4C1B,OAAO,MAAMkB,QAAQ,GAAGA,CAACC,YAAY,EAAEjB,UAAU,KAAK;EAAAkB,GAAA;EAClD,MAAM,CAACnB,KAAK,EAAEoB,QAAQ,CAAC,GAAGtB,QAAQ,CAACoB,YAAY,CAAC,EAAC;EACjD,MAAM,CAACG,OAAO,EAAEC,QAAQ,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC,EAAC;EAC5C,MAAMyB,KAAK,GAAGxB,aAAa,CAACC,KAAK,EAAEC,UAAU,CAAC;;EAE9C;EACA,MAAMuB,QAAQ,GAAIC,CAAC,IAAK;IACpBL,QAAQ,CAACK,CAAC,CAACC,MAAM,CAAC1B,KAAK,CAAC;EAC5B,CAAC;;EAED;EACA,MAAM2B,MAAM,GAAGA,CAAA,KAAK;IAChBL,QAAQ,CAAC,IAAI,CAAC;EAClB,CAAC;;EAED;EACA,OAAM;IACFtB,KAAK;IACLwB,QAAQ;IACRG,MAAM;IACNN,OAAO;IACP,GAAGE;EACP,CAAC;AACL,CAAC;AAAAJ,GAAA,CAvBYF,QAAQ;EAAA,QAGHlB,aAAa;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}