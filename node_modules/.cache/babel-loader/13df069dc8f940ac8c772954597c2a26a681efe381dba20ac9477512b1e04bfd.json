{"ast":null,"code":"var Classes = Object.create(null);\n\n/**\r\n * Create a new Connection instance.\r\n * @param {object|string} config Configuration or connection string for new MySQL connection\r\n * @return {Connection} A new MySQL connection\r\n * @public\r\n */\nexports.createConnection = function createConnection(config) {\n  var Connection = loadClass('Connection');\n  var ConnectionConfig = loadClass('ConnectionConfig');\n  return new Connection({\n    config: new ConnectionConfig(config)\n  });\n};\n\n/**\r\n * Create a new Pool instance.\r\n * @param {object|string} config Configuration or connection string for new MySQL connections\r\n * @return {Pool} A new MySQL pool\r\n * @public\r\n */\nexports.createPool = function createPool(config) {\n  var Pool = loadClass('Pool');\n  var PoolConfig = loadClass('PoolConfig');\n  return new Pool({\n    config: new PoolConfig(config)\n  });\n};\n\n/**\r\n * Create a new PoolCluster instance.\r\n * @param {object} [config] Configuration for pool cluster\r\n * @return {PoolCluster} New MySQL pool cluster\r\n * @public\r\n */\nexports.createPoolCluster = function createPoolCluster(config) {\n  var PoolCluster = loadClass('PoolCluster');\n  return new PoolCluster(config);\n};\n\n/**\r\n * Create a new Query instance.\r\n * @param {string} sql The SQL for the query\r\n * @param {array} [values] Any values to insert into placeholders in sql\r\n * @param {function} [callback] The callback to use when query is complete\r\n * @return {Query} New query object\r\n * @public\r\n */\nexports.createQuery = function createQuery(sql, values, callback) {\n  var Connection = loadClass('Connection');\n  return Connection.createQuery(sql, values, callback);\n};\n\n/**\r\n * Escape a value for SQL.\r\n * @param {*} value The value to escape\r\n * @param {boolean} [stringifyObjects=false] Setting if objects should be stringified\r\n * @param {string} [timeZone=local] Setting for time zone to use for Date conversion\r\n * @return {string} Escaped string value\r\n * @public\r\n */\nexports.escape = function escape(value, stringifyObjects, timeZone) {\n  var SqlString = loadClass('SqlString');\n  return SqlString.escape(value, stringifyObjects, timeZone);\n};\n\n/**\r\n * Escape an identifier for SQL.\r\n * @param {*} value The value to escape\r\n * @param {boolean} [forbidQualified=false] Setting to treat '.' as part of identifier\r\n * @return {string} Escaped string value\r\n * @public\r\n */\nexports.escapeId = function escapeId(value, forbidQualified) {\n  var SqlString = loadClass('SqlString');\n  return SqlString.escapeId(value, forbidQualified);\n};\n\n/**\r\n * Format SQL and replacement values into a SQL string.\r\n * @param {string} sql The SQL for the query\r\n * @param {array} [values] Any values to insert into placeholders in sql\r\n * @param {boolean} [stringifyObjects=false] Setting if objects should be stringified\r\n * @param {string} [timeZone=local] Setting for time zone to use for Date conversion\r\n * @return {string} Formatted SQL string\r\n * @public\r\n */\nexports.format = function format(sql, values, stringifyObjects, timeZone) {\n  var SqlString = loadClass('SqlString');\n  return SqlString.format(sql, values, stringifyObjects, timeZone);\n};\n\n/**\r\n * Wrap raw SQL strings from escape overriding.\r\n * @param {string} sql The raw SQL\r\n * @return {object} Wrapped object\r\n * @public\r\n */\nexports.raw = function raw(sql) {\n  var SqlString = loadClass('SqlString');\n  return SqlString.raw(sql);\n};\n\n/**\r\n * The type constants.\r\n * @public\r\n */\nObject.defineProperty(exports, 'Types', {\n  get: loadClass.bind(null, 'Types')\n});\n\n/**\r\n * Load the given class.\r\n * @param {string} className Name of class to default\r\n * @return {function|object} Class constructor or exports\r\n * @private\r\n */\nfunction loadClass(className) {\n  var Class = Classes[className];\n  if (Class !== undefined) {\n    return Class;\n  }\n\n  // This uses a switch for static require analysis\n  switch (className) {\n    case 'Connection':\n      Class = require('./lib/Connection');\n      break;\n    case 'ConnectionConfig':\n      Class = require('./lib/ConnectionConfig');\n      break;\n    case 'Pool':\n      Class = require('./lib/Pool');\n      break;\n    case 'PoolCluster':\n      Class = require('./lib/PoolCluster');\n      break;\n    case 'PoolConfig':\n      Class = require('./lib/PoolConfig');\n      break;\n    case 'SqlString':\n      Class = require('./lib/protocol/SqlString');\n      break;\n    case 'Types':\n      Class = require('./lib/protocol/constants/types');\n      break;\n    default:\n      throw new Error('Cannot find class \\'' + className + '\\'');\n  }\n\n  // Store to prevent invoking require()\n  Classes[className] = Class;\n  return Class;\n}","map":{"version":3,"names":["Classes","Object","create","exports","createConnection","config","Connection","loadClass","ConnectionConfig","createPool","Pool","PoolConfig","createPoolCluster","PoolCluster","createQuery","sql","values","callback","escape","value","stringifyObjects","timeZone","SqlString","escapeId","forbidQualified","format","raw","defineProperty","get","bind","className","Class","undefined","require","Error"],"sources":["G:/GH projects/WTFAdmin/node_modules/mysql/index.js"],"sourcesContent":["var Classes = Object.create(null);\r\n\r\n/**\r\n * Create a new Connection instance.\r\n * @param {object|string} config Configuration or connection string for new MySQL connection\r\n * @return {Connection} A new MySQL connection\r\n * @public\r\n */\r\nexports.createConnection = function createConnection(config) {\r\n  var Connection       = loadClass('Connection');\r\n  var ConnectionConfig = loadClass('ConnectionConfig');\r\n\r\n  return new Connection({config: new ConnectionConfig(config)});\r\n};\r\n\r\n/**\r\n * Create a new Pool instance.\r\n * @param {object|string} config Configuration or connection string for new MySQL connections\r\n * @return {Pool} A new MySQL pool\r\n * @public\r\n */\r\nexports.createPool = function createPool(config) {\r\n  var Pool       = loadClass('Pool');\r\n  var PoolConfig = loadClass('PoolConfig');\r\n\r\n  return new Pool({config: new PoolConfig(config)});\r\n};\r\n\r\n/**\r\n * Create a new PoolCluster instance.\r\n * @param {object} [config] Configuration for pool cluster\r\n * @return {PoolCluster} New MySQL pool cluster\r\n * @public\r\n */\r\nexports.createPoolCluster = function createPoolCluster(config) {\r\n  var PoolCluster = loadClass('PoolCluster');\r\n\r\n  return new PoolCluster(config);\r\n};\r\n\r\n/**\r\n * Create a new Query instance.\r\n * @param {string} sql The SQL for the query\r\n * @param {array} [values] Any values to insert into placeholders in sql\r\n * @param {function} [callback] The callback to use when query is complete\r\n * @return {Query} New query object\r\n * @public\r\n */\r\nexports.createQuery = function createQuery(sql, values, callback) {\r\n  var Connection = loadClass('Connection');\r\n\r\n  return Connection.createQuery(sql, values, callback);\r\n};\r\n\r\n/**\r\n * Escape a value for SQL.\r\n * @param {*} value The value to escape\r\n * @param {boolean} [stringifyObjects=false] Setting if objects should be stringified\r\n * @param {string} [timeZone=local] Setting for time zone to use for Date conversion\r\n * @return {string} Escaped string value\r\n * @public\r\n */\r\nexports.escape = function escape(value, stringifyObjects, timeZone) {\r\n  var SqlString = loadClass('SqlString');\r\n\r\n  return SqlString.escape(value, stringifyObjects, timeZone);\r\n};\r\n\r\n/**\r\n * Escape an identifier for SQL.\r\n * @param {*} value The value to escape\r\n * @param {boolean} [forbidQualified=false] Setting to treat '.' as part of identifier\r\n * @return {string} Escaped string value\r\n * @public\r\n */\r\nexports.escapeId = function escapeId(value, forbidQualified) {\r\n  var SqlString = loadClass('SqlString');\r\n\r\n  return SqlString.escapeId(value, forbidQualified);\r\n};\r\n\r\n/**\r\n * Format SQL and replacement values into a SQL string.\r\n * @param {string} sql The SQL for the query\r\n * @param {array} [values] Any values to insert into placeholders in sql\r\n * @param {boolean} [stringifyObjects=false] Setting if objects should be stringified\r\n * @param {string} [timeZone=local] Setting for time zone to use for Date conversion\r\n * @return {string} Formatted SQL string\r\n * @public\r\n */\r\nexports.format = function format(sql, values, stringifyObjects, timeZone) {\r\n  var SqlString = loadClass('SqlString');\r\n\r\n  return SqlString.format(sql, values, stringifyObjects, timeZone);\r\n};\r\n\r\n/**\r\n * Wrap raw SQL strings from escape overriding.\r\n * @param {string} sql The raw SQL\r\n * @return {object} Wrapped object\r\n * @public\r\n */\r\nexports.raw = function raw(sql) {\r\n  var SqlString = loadClass('SqlString');\r\n\r\n  return SqlString.raw(sql);\r\n};\r\n\r\n/**\r\n * The type constants.\r\n * @public\r\n */\r\nObject.defineProperty(exports, 'Types', {\r\n  get: loadClass.bind(null, 'Types')\r\n});\r\n\r\n/**\r\n * Load the given class.\r\n * @param {string} className Name of class to default\r\n * @return {function|object} Class constructor or exports\r\n * @private\r\n */\r\nfunction loadClass(className) {\r\n  var Class = Classes[className];\r\n\r\n  if (Class !== undefined) {\r\n    return Class;\r\n  }\r\n\r\n  // This uses a switch for static require analysis\r\n  switch (className) {\r\n    case 'Connection':\r\n      Class = require('./lib/Connection');\r\n      break;\r\n    case 'ConnectionConfig':\r\n      Class = require('./lib/ConnectionConfig');\r\n      break;\r\n    case 'Pool':\r\n      Class = require('./lib/Pool');\r\n      break;\r\n    case 'PoolCluster':\r\n      Class = require('./lib/PoolCluster');\r\n      break;\r\n    case 'PoolConfig':\r\n      Class = require('./lib/PoolConfig');\r\n      break;\r\n    case 'SqlString':\r\n      Class = require('./lib/protocol/SqlString');\r\n      break;\r\n    case 'Types':\r\n      Class = require('./lib/protocol/constants/types');\r\n      break;\r\n    default:\r\n      throw new Error('Cannot find class \\'' + className + '\\'');\r\n  }\r\n\r\n  // Store to prevent invoking require()\r\n  Classes[className] = Class;\r\n\r\n  return Class;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}