{"ast":null,"code":"var urlParse = require('url').parse;\nvar ClientConstants = require('./protocol/constants/client');\nvar Charsets = require('./protocol/constants/charsets');\nvar SSLProfiles = null;\nmodule.exports = ConnectionConfig;\nfunction ConnectionConfig(options) {\n  if (typeof options === 'string') {\n    options = ConnectionConfig.parseUrl(options);\n  }\n  this.host = options.host || 'localhost';\n  this.port = options.port || 3306;\n  this.localAddress = options.localAddress;\n  this.socketPath = options.socketPath;\n  this.user = options.user || undefined;\n  this.password = options.password || undefined;\n  this.database = options.database;\n  this.connectTimeout = options.connectTimeout === undefined ? 10 * 1000 : options.connectTimeout;\n  this.insecureAuth = options.insecureAuth || false;\n  this.supportBigNumbers = options.supportBigNumbers || false;\n  this.bigNumberStrings = options.bigNumberStrings || false;\n  this.dateStrings = options.dateStrings || false;\n  this.debug = options.debug;\n  this.trace = options.trace !== false;\n  this.stringifyObjects = options.stringifyObjects || false;\n  this.timezone = options.timezone || 'local';\n  this.flags = options.flags || '';\n  this.queryFormat = options.queryFormat;\n  this.pool = options.pool || undefined;\n  this.ssl = typeof options.ssl === 'string' ? ConnectionConfig.getSSLProfile(options.ssl) : options.ssl || false;\n  this.localInfile = options.localInfile === undefined ? true : options.localInfile;\n  this.multipleStatements = options.multipleStatements || false;\n  this.typeCast = options.typeCast === undefined ? true : options.typeCast;\n  if (this.timezone[0] === ' ') {\n    // \"+\" is a url encoded char for space so it\n    // gets translated to space when giving a\n    // connection string..\n    this.timezone = '+' + this.timezone.substr(1);\n  }\n  if (this.ssl) {\n    // Default rejectUnauthorized to true\n    this.ssl.rejectUnauthorized = this.ssl.rejectUnauthorized !== false;\n  }\n  this.maxPacketSize = 0;\n  this.charsetNumber = options.charset ? ConnectionConfig.getCharsetNumber(options.charset) : options.charsetNumber || Charsets.UTF8_GENERAL_CI;\n\n  // Set the client flags\n  var defaultFlags = ConnectionConfig.getDefaultFlags(options);\n  this.clientFlags = ConnectionConfig.mergeFlags(defaultFlags, options.flags);\n}\nConnectionConfig.mergeFlags = function mergeFlags(defaultFlags, userFlags) {\n  var allFlags = ConnectionConfig.parseFlagList(defaultFlags);\n  var newFlags = ConnectionConfig.parseFlagList(userFlags);\n\n  // Merge the new flags\n  for (var flag in newFlags) {\n    if (allFlags[flag] !== false) {\n      allFlags[flag] = newFlags[flag];\n    }\n  }\n\n  // Build flags\n  var flags = 0x0;\n  for (var flag in allFlags) {\n    if (allFlags[flag]) {\n      // TODO: Throw here on some future release\n      flags |= ClientConstants['CLIENT_' + flag] || 0x0;\n    }\n  }\n  return flags;\n};\nConnectionConfig.getCharsetNumber = function getCharsetNumber(charset) {\n  var num = Charsets[charset.toUpperCase()];\n  if (num === undefined) {\n    throw new TypeError('Unknown charset \\'' + charset + '\\'');\n  }\n  return num;\n};\nConnectionConfig.getDefaultFlags = function getDefaultFlags(options) {\n  var defaultFlags = ['-COMPRESS',\n  // Compression protocol *NOT* supported\n  '-CONNECT_ATTRS',\n  // Does *NOT* send connection attributes in Protocol::HandshakeResponse41\n  '+CONNECT_WITH_DB',\n  // One can specify db on connect in Handshake Response Packet\n  '+FOUND_ROWS',\n  // Send found rows instead of affected rows\n  '+IGNORE_SIGPIPE',\n  // Don't issue SIGPIPE if network failures\n  '+IGNORE_SPACE',\n  // Let the parser ignore spaces before '('\n  '+LOCAL_FILES',\n  // Can use LOAD DATA LOCAL\n  '+LONG_FLAG',\n  // Longer flags in Protocol::ColumnDefinition320\n  '+LONG_PASSWORD',\n  // Use the improved version of Old Password Authentication\n  '+MULTI_RESULTS',\n  // Can handle multiple resultsets for COM_QUERY\n  '+ODBC',\n  // Special handling of ODBC behaviour\n  '-PLUGIN_AUTH',\n  // Does *NOT* support auth plugins\n  '+PROTOCOL_41',\n  // Uses the 4.1 protocol\n  '+PS_MULTI_RESULTS',\n  // Can handle multiple resultsets for COM_STMT_EXECUTE\n  '+RESERVED',\n  // Unused\n  '+SECURE_CONNECTION',\n  // Supports Authentication::Native41\n  '+TRANSACTIONS' // Expects status flags\n  ];\n  if (options && options.localInfile !== undefined && !options.localInfile) {\n    // Disable LOCAL modifier for LOAD DATA INFILE\n    defaultFlags.push('-LOCAL_FILES');\n  }\n  if (options && options.multipleStatements) {\n    // May send multiple statements per COM_QUERY and COM_STMT_PREPARE\n    defaultFlags.push('+MULTI_STATEMENTS');\n  }\n  return defaultFlags;\n};\nConnectionConfig.getSSLProfile = function getSSLProfile(name) {\n  if (!SSLProfiles) {\n    SSLProfiles = require('./protocol/constants/ssl_profiles');\n  }\n  var ssl = SSLProfiles[name];\n  if (ssl === undefined) {\n    throw new TypeError('Unknown SSL profile \\'' + name + '\\'');\n  }\n  return ssl;\n};\nConnectionConfig.parseFlagList = function parseFlagList(flagList) {\n  var allFlags = Object.create(null);\n  if (!flagList) {\n    return allFlags;\n  }\n  var flags = !Array.isArray(flagList) ? String(flagList || '').toUpperCase().split(/\\s*,+\\s*/) : flagList;\n  for (var i = 0; i < flags.length; i++) {\n    var flag = flags[i];\n    var offset = 1;\n    var state = flag[0];\n    if (state === undefined) {\n      // TODO: throw here on some future release\n      continue;\n    }\n    if (state !== '-' && state !== '+') {\n      offset = 0;\n      state = '+';\n    }\n    allFlags[flag.substr(offset)] = state === '+';\n  }\n  return allFlags;\n};\nConnectionConfig.parseUrl = function (url) {\n  url = urlParse(url, true);\n  var options = {\n    host: url.hostname,\n    port: url.port,\n    database: url.pathname.substr(1)\n  };\n  if (url.auth) {\n    var auth = url.auth.split(':');\n    options.user = auth.shift();\n    options.password = auth.join(':');\n  }\n  if (url.query) {\n    for (var key in url.query) {\n      var value = url.query[key];\n      try {\n        // Try to parse this as a JSON expression first\n        options[key] = JSON.parse(value);\n      } catch (err) {\n        // Otherwise assume it is a plain string\n        options[key] = value;\n      }\n    }\n  }\n  return options;\n};","map":{"version":3,"names":["urlParse","require","parse","ClientConstants","Charsets","SSLProfiles","module","exports","ConnectionConfig","options","parseUrl","host","port","localAddress","socketPath","user","undefined","password","database","connectTimeout","insecureAuth","supportBigNumbers","bigNumberStrings","dateStrings","debug","trace","stringifyObjects","timezone","flags","queryFormat","pool","ssl","getSSLProfile","localInfile","multipleStatements","typeCast","substr","rejectUnauthorized","maxPacketSize","charsetNumber","charset","getCharsetNumber","UTF8_GENERAL_CI","defaultFlags","getDefaultFlags","clientFlags","mergeFlags","userFlags","allFlags","parseFlagList","newFlags","flag","num","toUpperCase","TypeError","push","name","flagList","Object","create","Array","isArray","String","split","i","length","offset","state","url","hostname","pathname","auth","shift","join","query","key","value","JSON","err"],"sources":["G:/GH projects/WTFAdmin/node_modules/mysql/lib/ConnectionConfig.js"],"sourcesContent":["var urlParse        = require('url').parse;\r\nvar ClientConstants = require('./protocol/constants/client');\r\nvar Charsets        = require('./protocol/constants/charsets');\r\nvar SSLProfiles     = null;\r\n\r\nmodule.exports = ConnectionConfig;\r\nfunction ConnectionConfig(options) {\r\n  if (typeof options === 'string') {\r\n    options = ConnectionConfig.parseUrl(options);\r\n  }\r\n\r\n  this.host               = options.host || 'localhost';\r\n  this.port               = options.port || 3306;\r\n  this.localAddress       = options.localAddress;\r\n  this.socketPath         = options.socketPath;\r\n  this.user               = options.user || undefined;\r\n  this.password           = options.password || undefined;\r\n  this.database           = options.database;\r\n  this.connectTimeout     = (options.connectTimeout === undefined)\r\n    ? (10 * 1000)\r\n    : options.connectTimeout;\r\n  this.insecureAuth       = options.insecureAuth || false;\r\n  this.supportBigNumbers  = options.supportBigNumbers || false;\r\n  this.bigNumberStrings   = options.bigNumberStrings || false;\r\n  this.dateStrings        = options.dateStrings || false;\r\n  this.debug              = options.debug;\r\n  this.trace              = options.trace !== false;\r\n  this.stringifyObjects   = options.stringifyObjects || false;\r\n  this.timezone           = options.timezone || 'local';\r\n  this.flags              = options.flags || '';\r\n  this.queryFormat        = options.queryFormat;\r\n  this.pool               = options.pool || undefined;\r\n  this.ssl                = (typeof options.ssl === 'string')\r\n    ? ConnectionConfig.getSSLProfile(options.ssl)\r\n    : (options.ssl || false);\r\n  this.localInfile        = (options.localInfile === undefined)\r\n    ? true\r\n    : options.localInfile;\r\n  this.multipleStatements = options.multipleStatements || false;\r\n  this.typeCast           = (options.typeCast === undefined)\r\n    ? true\r\n    : options.typeCast;\r\n\r\n  if (this.timezone[0] === ' ') {\r\n    // \"+\" is a url encoded char for space so it\r\n    // gets translated to space when giving a\r\n    // connection string..\r\n    this.timezone = '+' + this.timezone.substr(1);\r\n  }\r\n\r\n  if (this.ssl) {\r\n    // Default rejectUnauthorized to true\r\n    this.ssl.rejectUnauthorized = this.ssl.rejectUnauthorized !== false;\r\n  }\r\n\r\n  this.maxPacketSize = 0;\r\n  this.charsetNumber = (options.charset)\r\n    ? ConnectionConfig.getCharsetNumber(options.charset)\r\n    : options.charsetNumber || Charsets.UTF8_GENERAL_CI;\r\n\r\n  // Set the client flags\r\n  var defaultFlags = ConnectionConfig.getDefaultFlags(options);\r\n  this.clientFlags = ConnectionConfig.mergeFlags(defaultFlags, options.flags);\r\n}\r\n\r\nConnectionConfig.mergeFlags = function mergeFlags(defaultFlags, userFlags) {\r\n  var allFlags = ConnectionConfig.parseFlagList(defaultFlags);\r\n  var newFlags = ConnectionConfig.parseFlagList(userFlags);\r\n\r\n  // Merge the new flags\r\n  for (var flag in newFlags) {\r\n    if (allFlags[flag] !== false) {\r\n      allFlags[flag] = newFlags[flag];\r\n    }\r\n  }\r\n\r\n  // Build flags\r\n  var flags = 0x0;\r\n  for (var flag in allFlags) {\r\n    if (allFlags[flag]) {\r\n      // TODO: Throw here on some future release\r\n      flags |= ClientConstants['CLIENT_' + flag] || 0x0;\r\n    }\r\n  }\r\n\r\n  return flags;\r\n};\r\n\r\nConnectionConfig.getCharsetNumber = function getCharsetNumber(charset) {\r\n  var num = Charsets[charset.toUpperCase()];\r\n\r\n  if (num === undefined) {\r\n    throw new TypeError('Unknown charset \\'' + charset + '\\'');\r\n  }\r\n\r\n  return num;\r\n};\r\n\r\nConnectionConfig.getDefaultFlags = function getDefaultFlags(options) {\r\n  var defaultFlags = [\r\n    '-COMPRESS',          // Compression protocol *NOT* supported\r\n    '-CONNECT_ATTRS',     // Does *NOT* send connection attributes in Protocol::HandshakeResponse41\r\n    '+CONNECT_WITH_DB',   // One can specify db on connect in Handshake Response Packet\r\n    '+FOUND_ROWS',        // Send found rows instead of affected rows\r\n    '+IGNORE_SIGPIPE',    // Don't issue SIGPIPE if network failures\r\n    '+IGNORE_SPACE',      // Let the parser ignore spaces before '('\r\n    '+LOCAL_FILES',       // Can use LOAD DATA LOCAL\r\n    '+LONG_FLAG',         // Longer flags in Protocol::ColumnDefinition320\r\n    '+LONG_PASSWORD',     // Use the improved version of Old Password Authentication\r\n    '+MULTI_RESULTS',     // Can handle multiple resultsets for COM_QUERY\r\n    '+ODBC',              // Special handling of ODBC behaviour\r\n    '-PLUGIN_AUTH',       // Does *NOT* support auth plugins\r\n    '+PROTOCOL_41',       // Uses the 4.1 protocol\r\n    '+PS_MULTI_RESULTS',  // Can handle multiple resultsets for COM_STMT_EXECUTE\r\n    '+RESERVED',          // Unused\r\n    '+SECURE_CONNECTION', // Supports Authentication::Native41\r\n    '+TRANSACTIONS'       // Expects status flags\r\n  ];\r\n\r\n  if (options && options.localInfile !== undefined && !options.localInfile) {\r\n    // Disable LOCAL modifier for LOAD DATA INFILE\r\n    defaultFlags.push('-LOCAL_FILES');\r\n  }\r\n\r\n  if (options && options.multipleStatements) {\r\n    // May send multiple statements per COM_QUERY and COM_STMT_PREPARE\r\n    defaultFlags.push('+MULTI_STATEMENTS');\r\n  }\r\n\r\n  return defaultFlags;\r\n};\r\n\r\nConnectionConfig.getSSLProfile = function getSSLProfile(name) {\r\n  if (!SSLProfiles) {\r\n    SSLProfiles = require('./protocol/constants/ssl_profiles');\r\n  }\r\n\r\n  var ssl = SSLProfiles[name];\r\n\r\n  if (ssl === undefined) {\r\n    throw new TypeError('Unknown SSL profile \\'' + name + '\\'');\r\n  }\r\n\r\n  return ssl;\r\n};\r\n\r\nConnectionConfig.parseFlagList = function parseFlagList(flagList) {\r\n  var allFlags = Object.create(null);\r\n\r\n  if (!flagList) {\r\n    return allFlags;\r\n  }\r\n\r\n  var flags = !Array.isArray(flagList)\r\n    ? String(flagList || '').toUpperCase().split(/\\s*,+\\s*/)\r\n    : flagList;\r\n\r\n  for (var i = 0; i < flags.length; i++) {\r\n    var flag   = flags[i];\r\n    var offset = 1;\r\n    var state  = flag[0];\r\n\r\n    if (state === undefined) {\r\n      // TODO: throw here on some future release\r\n      continue;\r\n    }\r\n\r\n    if (state !== '-' && state !== '+') {\r\n      offset = 0;\r\n      state  = '+';\r\n    }\r\n\r\n    allFlags[flag.substr(offset)] = state === '+';\r\n  }\r\n\r\n  return allFlags;\r\n};\r\n\r\nConnectionConfig.parseUrl = function(url) {\r\n  url = urlParse(url, true);\r\n\r\n  var options = {\r\n    host     : url.hostname,\r\n    port     : url.port,\r\n    database : url.pathname.substr(1)\r\n  };\r\n\r\n  if (url.auth) {\r\n    var auth = url.auth.split(':');\r\n    options.user     = auth.shift();\r\n    options.password = auth.join(':');\r\n  }\r\n\r\n  if (url.query) {\r\n    for (var key in url.query) {\r\n      var value = url.query[key];\r\n\r\n      try {\r\n        // Try to parse this as a JSON expression first\r\n        options[key] = JSON.parse(value);\r\n      } catch (err) {\r\n        // Otherwise assume it is a plain string\r\n        options[key] = value;\r\n      }\r\n    }\r\n  }\r\n\r\n  return options;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}